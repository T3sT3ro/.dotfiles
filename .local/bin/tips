#!/bin/bash

# author:   Tooster 
# license:  MIT, full license text at https://mit-license.org/
# source:   https://gist.github.com/T3sT3ro/bc06294f51091c0e34176c62683d538e
#
# Reads the tips json file, prints it and advances to a next tip. With some util arguments to make working with it easier
#
# requirements:
# - jq - for tips database (json) management
# - sponge (from `moreutils` package) - for updating file
# recommended:
# - gum - for nice prompting and markdown printing (glow not needed when using `gum format`) :https://github.com/charmbracelet/gum
# - glow - for nice markdown printing: https://github.com/charmbracelet/glow
#
# for now, not strictly following https://clig.dev/

if [[ $1 == "completions" ]]; then
  echo 'complete -W "all n next c current p previous stats remote-add import-remotes fetch upgrade completions help" tips'
  exit 0;
fi;

HELP="\
Utility for printing and managing helpful tips in the terminal,
similar to IDEs' tips shown on startup. For use in startup script.
Can fetch new tips from web and add remotes. Data stored by default in '~/.local/share/tips/'.

Usage: 
  tips [arguments]

Arguments:
  n, next (default)       move to and print next tip
  c, current              print current tip
  p, previous             move to and print previous tip
  <number>                print n-th tip from current databse
  all                     prints all tips
  stats                   prints the tips database stats
  remote-add <name> <url> add remote repository url for fetching tips
  import-remotes <url>    import all remotes from url hosting remotes.json
  fetch                   fetches tips from remotes in 'remotes' file, merges with current tips.db
  upgrade                 upgrades tips utility (overwrites current installation in .local/bin/tips)
  completions             generate completions
  help, -h, -?            print this message"



# configurable
TIPS_DIR="${TIPS_DIR:-$HOME/.local/share/tips}"
TIPS_FORMATTER=${TIPS_FORMATTER:-$(command -v gum >/dev/null && echo "gum format --theme=dark" || echo cat)}
# fixed
TIPS_DB="$TIPS_DIR/tips.json"
TIPS_REMOTES="$TIPS_DIR/remotes.json"
TIPS_CURRENT="$TIPS_DIR/current"
TIPS_URL="https://gist.githubusercontent.com/T3sT3ro/bc06294f51091c0e34176c62683d538e"
TIPS_UPGRADE_URL="$TIPS_URL/raw/tips"

# <prompt> <suffix in fallback> <default in fallback>
promptConfirm() {
  if command -v gum 2>&1 >/dev/null; then
    gum confirm "$1"
    return $?
  fi
  read -srn 1 -p "$1 $2 " yesno; echo;
  [[ ${yesno:-$3} =~ [yY] ]];
  return $?
}

# used with MOVE parameter will move to tips + $MOVE
# used with TIP parameter will use this number instead of reading from 'current' file
displayTip() {
  SIZE=$(jq '. | length' "$TIPS_DB")

  if [[ -z $TIP ]]; then
    source "$TIPS_CURRENT"
  else
    CURRENT=$TIP
  fi

  if [[ $? -ne 0 || -z $SIZE ]]; then
    echo "$0: missing file or invalid format: $TIPS_DB" >&2;
    exit 2;
  fi;

  OFFSET=${MOVE:-0}
  CURRENT=$((((CURRENT+OFFSET)%SIZE+SIZE)%SIZE))

  [[ ! -z $MOVE ]] && declare -p CURRENT >"$TIPS_CURRENT"

  jq -r --arg current $CURRENT '. as $tips | "# TIP #\($current):\n\($tips[$current | tonumber])"' "$TIPS_DB"
}

# legacy: unsorted unique entries:
# .tips[] | [0].tips += .[1].tips | .[0] | .tips |= (map({key:.,value:1}) | from_entries | keys_unsorted)

shopt -s extglob
SUBCOMMAND="${1:-next}"
shift 1

case "$SUBCOMMAND" in
  p|previous) 
    MOVE=-1; displayTip | $TIPS_FORMATTER
    ;;
  c|current) 
    MOVE=0;  displayTip | $TIPS_FORMATTER
    ;;
  n|next) 
    MOVE=+1; displayTip | $TIPS_FORMATTER
    ;;
  ?([+-])+([[:digit:]]))
    TIP=$SUBCOMMAND; displayTip | $TIPS_FORMATTER
    ;;
  all)
    jq -r '. | to_entries | map("# TIP #\(.key)\n\(.value)\n") | .[]' "$TIPS_DB" | $TIPS_FORMATTER
    ;;

  remote-add)
    if [[ $# < 2 || -z $1 || -z $2 ]]; then
      echo -e "usage: tips remote-add <name> <url to tips.json>" >&2
      exit 1
    fi;
    
    jq -s --arg name "$1" --arg url "$2" '(.[] // {}) + {($url): $name} ' "$TIPS_REMOTES" | sponge "$TIPS_REMOTES"
    echo "Added '$1': '$2'"
    echo "Run 'tips fetch' to downlaod tips."
    ;;
  import-remotes)
    if [[ -z $1 ]]; then
      echo -e "usage: tips import-remotes <url to remotes.json>" >&2
      exit 1
    fi;

    { curl -f "$1"; cat remotes.json; } | jq -s 'add' | sponge "$TIPS_REMOTES";

    echo >&2 "Imported all remotes. Run 'tips fetch' to downlaod tips."
    ;;
  fetch)
    jq -r '. | to_entries | map([.key, .value] | @tsv)[]' "$TIPS_REMOTES" | 
      while read -r URL NAME; do 
        echo "Updating '$NAME': $URL" >&2; 
        tput setaf 1 >&2
        curl -fsS "$URL?r=$RAND" # random parameter to mitigate caching issues on CDN such as gist.github.com
        tput sgr0 >&2
      done | 
        if output=$(set -o pipefail; jq -sr '. | flatten | unique'); then 
          echo "$output" > "$TIPS_DB"
          echo "Tips database updated" >&2
        else
          echo "Update aborted" >&2
        fi
    ;;

  upgrade)
    TIPS_SH=$(which tips)
    if [[ ! -f $TIPS_SH ]] || promptConfirm "Overwrite existing program '$TIPS_SH'? (y/N)"; then
      echo "Saving to $TIPS_SH..."
      curl -fsSo "$TIPS_SH" "$TIPS_UPGRADE_URL"
    fi
    ;;

  stats)
    source "$TIPS_CURRENT"
    echo "databse: $TIPS_DB"
    echo "remotes: $(jq 'length' "$TIPS_REMOTES")"
    echo "entries: $(jq 'length' "$TIPS_DB")"
    echo "current: $CURRENT"
    ;;
  -h|-?|help|--help)
    echo "$HELP"
    ;;
  *) 
    echo "$HELP"
    exit 1;
    ;;
esac
